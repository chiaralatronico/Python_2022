# OPERAZIONI CON IL CSV

import csv

# apro il file in lettura

my_data = open("C:/Lab2_Python/montecristo_point.csv", 'r')

# specifico il delimitatore

my_csv = csv.reader(my_data, delimiter = ',') 

# voglio aggiungere al csv la quota ellissoidica che è da calcolare
# creo una nuova variabile header, dove specifico i nomi dei campi già esistenti,
  con l'aggiunta della quota ellissoidica

header = ['id', 'coord_x', 'coord_y', 'h', 'h_elips']

# creo una nuova lista vuota
# con il ciclo for scorro ogni riga del csv originale
# creo la nuova variabile h_elips: la calcolo con il valore all'interno della terza posizione 
  della lista (quindi 'h', cioè la quota ortometrica) + 48 (valore di ondulazione del geoide)
# appendo la nuova variabile alla fine di ogni riga
# ogni riga la appendo alla super lista 

L = []
for row in my_csv:
    h_elips = int(row[3]) + 48
    row.append(h_elips)
    L.append(row)
    print(row)      # stampo le nuove righe (liste) con l'aggiunta di h_elips

>>>
['1', '606879.926248845', '4688202.49859414', '165', 213]
(...)
['26', '608809.070287334', '4687246.03222212', '327', 375]
>>>

# --------------

# Creo un file di output csv (in modalità scrittura)
# serve aprirne un altro con un nome diverso per non sovrascrivere

out_data = open("C:/Lab2_Python/out/montecristo_point_helips.csv", 'w')

# con la nuova variabile scrivo il file di output specificando il delimitatore

new_csv = csv.writer(out_data, delimiter = ',')
new_csv.writerow(header)
new_csv.writerows(L)

# chiudo i dati

my_data.close()
out_data.close()
print('Done!')

# ---------------

# stesse operazioni, ma con il modulo pandas

# (inserisco un header manualmente nel file montecristo_point.csv)

# importo pandas
# per non scrivere pandas ogni volta gli chiedo di abbreviarlo come pd
# per richiamare il modulo userò pd

import pandas as pd
my_csv = pd.read_csv("C:/Lab2_Python/montecristo_point.csv")

# voglio stampare il tipo di csv
print(type(my_csv))

>>>
<class 'pandas.core.frame.DataFrame'>  # mi dice che dentro my_csv c'è un elemento di tipo pandas
>>>

# vede il file come un DataFrame, cioè dati separati da delimitatori

# il modulo pandas ragiona in modo diverso da csv: 
  ragiona per dataframes e vede il csv come una tabella
# pandas non usa ciclo for per stmpare le righe del mio file my_csv
# posso stampare direttamente

print(my_csv)

 # aggiunge, però, una prima colonna (prima dell'id) con numeri progressivi

>>>
     id         coordx         coordy     h
0     1  606879.926249   4.688202e+06   165   
(...)
>>>

# se voglio stampare solo il valore relativo alla coord x non devo specificare l'indice
  numerico come con le liste. Basta scrivere il nome del valore da visualizzare

print(my_csv['coordx']

>>>
0   606879.926249      # oltre all'id suo, mi stampa solo le coordx
1   607544.589321
(...)
>>>

# utilizzando pandas, calcolo la quota ellissoidica
# nell'header non c'è il valore h_elips, ma pandas crea tale campo in modo automatico
  quando ci associo l'operazione di calcolo 

my_csv['h_elips'] = my_csv['h'] + 48

# se lancio la stampa del mio csv vedrò la nuova colonna relativa alla quota elissoidica

print(my_csv)

>>>
    id          coordx         coordy     h   h_elips
0    1   606879.926249   4.688202e+06   165       213
(...)
>>>

# -----------

# creo un nuovo csv con pandas
# con  .to_csv  prende il mio csv di partenza e lo mette su un altro csv 
  nella posizione che gli indico

my_csv.to_csv("C:/Lab2_Python/out/montecristo_point_helips_pandas.csv")
print("Done!")

# -------------------------------

# Console Python su Qgis da aprire con l'icona o  ctrl + alt + p

# importo la libreria gdal
import gdal

# per apire il mio fil raster dem: creo una variabile, le assegno la funzione open 
  e le dò come parametro il percorso 

my_raster = gdal.Open('D:/Magistrale/2_anno/2_semestre/Lab_2/Python/pianosa_dem.tif')

# come si ottengono i metadati relativi al dato che sto utilizzando
  (gli stessi che sono leggibili in 'maggiori informazioni' nelle proprietà del raster)

print(my_raster.GetMetadata())

# voglio leggere le info relative alle banda su cui sto lavorando (ho solo la prima banda)

band = my_raster.GetRasterBand(1)
print(band)

# se voglio sapere che tipo è la mia variabile banda...
print(type(band))

>>>
<class 'osgeo.gdal.Band'>  # mi dice che è una "Band"
>>>

# voglio stampare la matrice contenente i valori di quota relativi alla banda del raster
# chiedo di leggermi come matrice (array) tutti i valori nella banda del raster

band_values = band.ReadAsArray()   

print(band_values)

>>>
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 ...
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]    
 
# vedo solo i valori all'estremità del raster, cioè quota 0 relativa al mare
 
# per leggere la quota in un determinato punto del raster,
 scrivo il numero del pixel lungo la coordx e lungo la coordy

print(band_values[400, 500])

>>> 6.645758

# vedere le info relative al raster

spatial = my_raster.GetSpatialRef()
print(spatial)


# la geotrasformata (da usare per georeferenziare i dati)
# una geotrasformazione è una trasformazione dallo spazio delle coordinate dell'immagine 
  (riga, colonna), noto anche come (pixel, linea), allo spazio delle coordinate georeferenziate 
  (coordinate proiettate o geografiche).
  Una geotrasformata consiste in un insieme di 6 coefficienti:
  
# GT(0) coordinata x dell'angolo superiore sinistro del pixel superiore sinistro
  GT(1) w-e risoluzione dei pixel / larghezza dei pixel.
  GT(2) rotazione delle righe (tipicamente zero).
  GT(3) coordinata y dell'angolo superiore sinistro del pixel superiore sinistro.
  GT(4) rotazione delle colonne (tipicamente zero).
  GT(5) n-s risoluzione pixel / altezza pixel (valore negativo per un'immagine con il nord in alto).

geot = my_raster.GetGeoTransform()
print(geot)

>>>
(585240.0, 10.0, 0.0, 4719330.0, 0.0, -10.0)
>>>




